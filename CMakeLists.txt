cmake_minimum_required(VERSION 3.22)

cmake_policy(VERSION ${CMAKE_VERSION})
if(POLICY CMP0021)
  cmake_policy(SET CMP0021 NEW)
endif()

if(POLICY CMP0077)
  cmake_policy(SET CMP0077 NEW)
endif()

if(POLICY CMP0156)
  cmake_policy(SET CMP0156 NEW)
endif()

if(POLICY CMP0179)
  cmake_policy(SET CMP0179 NEW)
endif()

project(WsCommon VERSION 0.1.1 LANGUAGES C CXX)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  message(STATUS "Using Debug configuration")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
  message(STATUS "Using Release configuration")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -DNDEBUG -flto -march=native")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--strip-all")
endif()

if(NOT CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
  option(WSCOMMON_ENABLE_INSTALL "Enable install" OFF)
else()
  option(WSCOMMON_ENABLE_INSTALL "Enable install" ON)
endif()

if(WIN32 AND NOT DEFINED WSCOMMON_BUILD_DLL)
  set(WSCOMMON_BUILD_DLL ON)
else()
  set(WSCOMMON_BUILD_DLL OFF)
endif()

option(WSCOMMON_MODULAR_BUILD "Build each module as a separate target" OFF)

set(CMAKE_INSTALL_RPATH "$ORIGIN")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)
set(CMAKE_BUILD_RPATH_USE_ORIGIN ON)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)
include(WsCommonHelpers)
include(WsCommonDll)

set(WSCOMMON_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(WSCOMMON_LIB_DIR ${WSCOMMON_SOURCE_DIR}/lib)
set(WSCOMMON_BIN_DIR ${WSCOMMON_SOURCE_DIR}/bin)

option(WSCOMMON_BUILD_IMAGING "Build imaging and pixel modules" ON)
option(WSCOMMON_BUILD_IO "Build IO module" ON)
option(WSCOMMON_BUILD_LOGGING "Build logging module" ON)
option(WSCOMMON_BUILD_POOLING "Build pooling module" ON)
option(WSCOMMON_BUILD_THREADING "Build threading module" ON)

message(STATUS "PROJECT_NAME ${PROJECT_NAME}")
message(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
message(STATUS "CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
message(STATUS "CMAKE_GENERATOR: ${CMAKE_GENERATOR}")
message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "CMAKE_RUNTIME_OUTPUT_DIRECTORY: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

add_subdirectory(src)

if(WSCOMMON_ENABLE_INSTALL)
  install(EXPORT ${PROJECT_NAME}Targets
    NAMESPACE ws::
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  )

  configure_package_config_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/cmake/wsConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  )

  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  )

  write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY SameMajorVersion
  )

  install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
  )

  install(DIRECTORY ${WSCOMMON_SOURCE_DIR}/src
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ws
  FILES_MATCHING
    PATTERN "*.h"
    PATTERN "detail" EXCLUDE
    PATTERN "*/detail/*" EXCLUDE
  )
endif()
